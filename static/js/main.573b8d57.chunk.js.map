{"version":3,"sources":["Button/Button.tsx","Counter/Counter.tsx","Input/Input.tsx","SettingCounter/SettingCounter.tsx","state/counterReducer.ts","App.tsx","reportWebVitals.ts","state/store.ts","state/utils/localStorage-utils.ts","index.tsx","Input/Input.module.css","Counter/Counter.module.css","SettingCounter/SettingCounter.module.css"],"names":["Button","props","disabled","onClick","funcButton","title","getStyle","errorText","inc","maxValue","startValue","s","errorTextDisplay","textDisplay","Counter","className","counter","isShowStartTestMessage","incCount","disabledInc","resetCount","disabledRes","Input","titleInput","onKeyPress","e","key","pressSet","errorInput","type","onChange","changeValue","currentTarget","value","SettingCounter","settingCounter","settingDisplay","changeMaxValue","errorMaxInput","changeStartValue","errorStartInput","disabledSet","initialState","disableSet","App","useSelector","state","count","dispatch","useDispatch","input","changeStartValueAC","changeMaxValueAC","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","window","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.573b8d57.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    funcButton: () => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <button disabled={props.disabled} onClick={props.funcButton}>{props.title}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Counter.module.css'\r\nimport {Button} from '../Button/Button';\r\n\r\n\r\ntype CounterPropsType = {\r\n    maxValue: number\r\n    inc: number\r\n    incCount: () => void\r\n    resetCount: () => void\r\n    disabledInc: boolean\r\n    disabledRes: boolean\r\n    isShowStartTestMessage: boolean\r\n    errorText: string\r\n    startValue: number\r\n}\r\n\r\nconst getStyle = (props: CounterPropsType) => {\r\n    if (props.errorText === 'Incorrect value!' || props.inc === props.maxValue || props.startValue < 0 || props.maxValue < props.startValue) {\r\n        return s.errorTextDisplay\r\n    } else  {\r\n       return s.textDisplay\r\n    }\r\n}\r\nexport const Counter = (props: CounterPropsType) => {\r\n    return (\r\n        <div className={s.counter}>\r\n            <div className={getStyle(props)}>\r\n                {props.isShowStartTestMessage && props.errorText ? props.errorText : props.inc}\r\n            </div>\r\n\r\n            <div className={'button'}>\r\n\r\n                <Button title={'inc'}\r\n                        funcButton={props.incCount}\r\n                        disabled={props.disabledInc}\r\n                />\r\n                <Button title={'reset'}\r\n                        funcButton={props.resetCount}\r\n                        disabled={props.disabledRes}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\n\r\ntype InputPropsType = {\r\n    changeValue: (value: number) => void\r\n    pressSet: () => void\r\n    titleInput: string\r\n    errorInput: string\r\n    value: number\r\n}\r\n\r\nconst Input = (props:InputPropsType) => {\r\n\r\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeValue(+e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressKeyHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            props.pressSet()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <span>{props.titleInput}</span>\r\n            <input\r\n                onKeyPress={onKeyPressKeyHandler}\r\n                className={props.errorInput}\r\n                type={'number'}\r\n                onChange={onChangeInput}\r\n                value={props.value}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;","import React from 'react';\r\nimport {Button} from '../Button/Button';\r\nimport s from './SettingCounter.module.css'\r\nimport Input from '../Input/Input';\r\n\r\n\r\ntype SettingCounterPropsType = {\r\n    startValue: number\r\n    maxValue: number\r\n    changeStartValue: (value: number) => void\r\n    changeMaxValue: (value: number) => void\r\n    pressSet: () => void\r\n    disabledSet: boolean\r\n    errorMaxInput: string\r\n    errorStartInput: string\r\n}\r\n\r\n\r\n\r\nexport const SettingCounter = (props: SettingCounterPropsType) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.pressSet()\r\n    }\r\n\r\n    return (\r\n        <div className={s.settingCounter}>\r\n            <div className={s.settingDisplay}>\r\n                <Input changeValue={props.changeMaxValue}\r\n                       pressSet={props.pressSet}\r\n                       titleInput={'max value:'}\r\n                       errorInput={props.errorMaxInput}\r\n                       value={props.maxValue}\r\n                />\r\n\r\n                <Input changeValue={props.changeStartValue}\r\n                       pressSet={props.pressSet}\r\n                       titleInput={'start value:'}\r\n                       errorInput={props.errorStartInput}\r\n                       value={props.startValue}\r\n                />\r\n            </div>\r\n            <div className={'button'}>\r\n                <Button\r\n                    title={'set'}\r\n                    funcButton={onClickHandler}\r\n                    disabled={props.disabledSet}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","let initialState = {\r\n    startValue: 0,\r\n    maxValue: 5,\r\n    inc: 0,\r\n    disableSet: false,\r\n    errorText: 'Enter value and press \"set\"'\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const countReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CHANGE-START-VALUE':\r\n            if (action.value < 0 || action.value >= state.maxValue) {\r\n                return {...state, startValue: action.value, disableSet: false, errorText: 'Incorrect value!'}\r\n            } else {\r\n                return {...state, startValue: action.value, disableSet: false, errorText: 'Enter value and press \"set\"'}\r\n            }\r\n\r\n        case 'CHANGE-MAX-VALUE': {\r\n            if (action.value <= 0 || action.value <= state.startValue) {\r\n                return {...state, maxValue: action.value, disableSet: false, errorText: 'Incorrect value!'}\r\n            } else {\r\n                return {...state, maxValue: action.value, disableSet: false, errorText: 'Enter value and press \"set\"'}\r\n            }\r\n        }\r\n        case 'PRESS-SET': {\r\n            return {...state, inc: state.startValue, disableSet: true, errorText: ''}\r\n        }\r\n        case 'INC-COUNT': {\r\n            if (state.inc < state.maxValue) {\r\n                return {...state, inc: state.inc + 1}\r\n            } else {\r\n                return state\r\n            }\r\n        }\r\n        case 'RESET-COUNT': {\r\n            return {...state, inc: state.startValue}\r\n        }\r\n        /*     // Case from LocalStorage\r\n         case 'SET-START-VALUE-FROM-LS': {\r\n             return {...state, startValue: action.value}\r\n         }\r\n         case 'SET-MAX-VALUE-FROM-LS': {\r\n             return {...state, maxValue: action.value}\r\n         }*/\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionType = ChangeStartValueACType | ChangeMaxValueACType | PressSetACType\r\n    | IncCountACType | ResetCountACType /*| SetStartValueFromLocalStorageACType*/\r\n/* | SetMaxValueFromLocalStorageACType*/\r\n\r\ntype ChangeStartValueACType = ReturnType<typeof changeStartValueAC>\r\nexport const changeStartValueAC = (value: number) => {\r\n    return {type: 'CHANGE-START-VALUE', value} as const\r\n}\r\ntype ChangeMaxValueACType = ReturnType<typeof changeMaxValueAC>\r\nexport const changeMaxValueAC = (value: number) => {\r\n    return {type: 'CHANGE-MAX-VALUE', value} as const\r\n}\r\ntype PressSetACType = ReturnType<typeof pressSetAC>\r\nexport const pressSetAC = () => {\r\n    return {type: 'PRESS-SET'} as const\r\n}\r\ntype IncCountACType = ReturnType<typeof incCountAC>\r\nexport const incCountAC = () => {\r\n    return {type: 'INC-COUNT'} as const\r\n}\r\ntype ResetCountACType = ReturnType<typeof resetCountAC>\r\nexport const resetCountAC = () => {\r\n    return {type: 'RESET-COUNT'} as const\r\n}\r\n// Action Creator from localStorage\r\n// type SetStartValueFromLocalStorageACType = ReturnType<typeof setStartValueFromLocalStorageAC>\r\n// export const setStartValueFromLocalStorageAC = (value: number) => {\r\n//     return {type: 'SET-START-VALUE-FROM-LS', value} as const\r\n// }\r\n// type SetMaxValueFromLocalStorageACType = ReturnType<typeof setMaxValueFromLocalStorageAC>\r\n// export const setMaxValueFromLocalStorageAC = (value: number) => {\r\n//     return {type: 'SET-MAX-VALUE-FROM-LS', value} as const\r\n// }\r\n//THUNK\r\n//Record\r\n// export const changeStartValueTC = (value: number) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n//     let startValue = getState().count.startValue\r\n//     localStorage.setItem('startValue', JSON.stringify(startValue + 1))\r\n//     dispatch(changeStartValueAC(value))\r\n// }\r\n// export const changeMaxValueTC = (value: number) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n//     let maxValue = getState().count.maxValue\r\n//     localStorage.setItem('maxValue', JSON.stringify(maxValue + 1))\r\n//     dispatch(changeMaxValueAC(value))\r\n// }\r\n\r\n//Read\r\n// export const changeStartValueFromLocalStorageTC = () => (dispatch: Dispatch) => {\r\n//     let startValueAsString = localStorage.getItem('startValue')\r\n//     if (startValueAsString) {\r\n//         let newStartValue = JSON.parse(startValueAsString)\r\n//         dispatch(setStartValueFromLocalStorageAC(newStartValue))\r\n//     }\r\n// }\r\n// export const changeMaxValueFromLocalStorageTC = () => (dispatch: Dispatch) => {\r\n//     let maxValueAsString = localStorage.getItem('maxValue')\r\n//     if (maxValueAsString) {\r\n//         let newMaxValue = JSON.parse(maxValueAsString)\r\n//         dispatch(setMaxValueFromLocalStorageAC(newMaxValue))\r\n//     }\r\n// }","import React from 'react';\nimport './App.css';\nimport {Counter} from './Counter/Counter';\nimport {SettingCounter} from './SettingCounter/SettingCounter';\nimport s from './Input/Input.module.css'\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from './state/store';\nimport {changeMaxValueAC, changeStartValueAC, incCountAC, pressSetAC, resetCountAC} from './state/counterReducer';\n\nfunction App() {\n\n    // const [startValue, setStartValue] = useState<number>(0)\n    // const [maxValue, setMaxValue] = useState<number>(5)\n    // const [inc, setInc] = useState<number>(0)\n    // const [disableSet, setDisableSet] = useState<boolean>(false)\n    // const [errorText, setErrorText] = useState<string>('Enter value and press \"set\"')\n\n    const startValue = useSelector<AppRootStateType, number>(state => state.count.startValue)\n    const maxValue = useSelector<AppRootStateType, number>(state => state.count.maxValue)\n    const inc = useSelector<AppRootStateType, number>(state => state.count.inc)\n    const disableSet = useSelector<AppRootStateType, boolean>(state => state.count.disableSet)\n    const errorText = useSelector<AppRootStateType, string>(state => state.count.errorText)\n    const dispatch = useDispatch()\n\n\n    // useEffect(() => {\n    //     let startValueAsString = localStorage.getItem('startValue')\n    //     if (startValueAsString) {\n    //         let newStartValue = JSON.parse(startValueAsString)\n    //         dispatch(changeStartValueAC(newStartValue))\n    //         // setStartValue(newStartValue)\n    //     }\n    // }, [])\n    // useEffect(() => {\n    //     let maxValueAsString = localStorage.getItem('maxValue')\n    //     if (maxValueAsString) {\n    //         let newMaxValue = JSON.parse(maxValueAsString)\n    //         dispatch(changeMaxValueAC(newMaxValue))\n    //         // setMaxValue(newMaxValue)\n    //     }\n    // }, [])\n\n    /*    useEffect(() => {\n            dispatch(changeStartValueFromLocalStorageTC())\n        }, [])\n        useEffect(() => {\n            dispatch(changeMaxValueFromLocalStorageTC())\n        }, [])*/\n\n    const errorMaxInput = maxValue <= startValue || maxValue <= 0 ? s.errorInput : s.input\n    const errorStartInput = startValue < 0 ? s.errorInput : s.input\n    const disabledInc = !disableSet || inc === maxValue\n    const disabledRes = !disableSet || startValue === inc\n    const disabledSet = disableSet || startValue > maxValue || startValue < 0 || maxValue <= 0 || maxValue === startValue\n\n    const changeStartValue = (value: number) => {\n        // localStorage.setItem('startValue', JSON.stringify(startValue))\n        // dispatch(changeStartValueAC(value))\n        dispatch(changeStartValueAC(value))\n        // setStartValue(value)\n        // setDisableSet(false)\n        // if (value < 0 || value >= maxValue) {\n        //     setErrorText('Incorrect value!')\n        // } else {\n        //     setErrorText('Enter value and press \"set\"')\n        // }\n    }\n    const changeMaxValue = (value: number) => {\n        // localStorage.setItem('maxValue', JSON.stringify(maxValue))\n        // dispatch(changeMaxValueAC(value))\n        dispatch(changeMaxValueAC(value))\n        // setMaxValue(value)\n        // setDisableSet(false)\n        // if (value <= 0 || value <= startValue) {\n        //     setErrorText('Incorrect value!')\n        // } else {\n        //     setErrorText('Enter value and press \"set\"')\n        // }\n    }\n\n    const pressSet = () => {\n        dispatch(pressSetAC())\n        // setInc(startValue)\n        // setDisableSet(true)\n        // setErrorText('')\n    }\n    const incCount = () => {\n        dispatch(incCountAC())\n        // if (inc < maxValue) {\n        //     setInc(inc + 1)\n        // }\n    }\n    const resetCount = () => {\n        dispatch(resetCountAC())\n        // setInc(startValue)\n    }\n\n    return (\n        <div className={'App'}>\n            <SettingCounter\n                startValue={startValue}\n                maxValue={maxValue}\n                errorMaxInput={errorMaxInput}\n                errorStartInput={errorStartInput}\n                changeStartValue={changeStartValue}\n                changeMaxValue={changeMaxValue}\n                pressSet={pressSet}\n                disabledSet={disabledSet}\n            />\n            <Counter\n                startValue={startValue}\n                errorText={errorText}\n                isShowStartTestMessage={!disableSet}\n                maxValue={maxValue}\n                inc={inc}\n                incCount={incCount}\n                resetCount={resetCount}\n                disabledInc={disabledInc}\n                disabledRes={disabledRes}\n            />\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {countReducer} from './counterReducer';\r\nimport thunk from 'redux-thunk';\r\nimport {loadState, saveState} from './utils/localStorage-utils';\r\n\r\nconst rootReducer = combineReducers( {\r\n    count: countReducer\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, loadState(), applyMiddleware(thunk))\r\n\r\nstore.subscribe( () => {\r\n    saveState({\r\n        count: store.getState().count\r\n    })\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n","import {AppRootStateType} from '../store';\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: AppRootStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__TMoqq\",\"errorInput\":\"Input_errorInput__3xS39\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__P5Pit\",\"errorTextDisplay\":\"Counter_errorTextDisplay__2Eoef\",\"textDisplay\":\"Counter_textDisplay__1ienk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingCounter\":\"SettingCounter_settingCounter__3L6s3\",\"settingDisplay\":\"SettingCounter_settingDisplay__1QlZl\"};"],"sourceRoot":""}